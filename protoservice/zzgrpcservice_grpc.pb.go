// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.4
// source: zzgrpcservice.proto

package protoservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteCallClient is the client API for RemoteCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteCallClient interface {
	// Grpc 单一模式一次请求返回一个对象
	GrpcRemoteFunctionCall(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (*ResponseReceive, error)
	// Grpc 服务端流模式一次请求返回多个流对象
	ServerStreamGrpcRemoteFunctionCall(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (RemoteCall_ServerStreamGrpcRemoteFunctionCallClient, error)
}

type remoteCallClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteCallClient(cc grpc.ClientConnInterface) RemoteCallClient {
	return &remoteCallClient{cc}
}

func (c *remoteCallClient) GrpcRemoteFunctionCall(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (*ResponseReceive, error) {
	out := new(ResponseReceive)
	err := c.cc.Invoke(ctx, "/protoservice.RemoteCall/GrpcRemoteFunctionCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCallClient) ServerStreamGrpcRemoteFunctionCall(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (RemoteCall_ServerStreamGrpcRemoteFunctionCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteCall_ServiceDesc.Streams[0], "/protoservice.RemoteCall/ServerStreamGrpcRemoteFunctionCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCallServerStreamGrpcRemoteFunctionCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCall_ServerStreamGrpcRemoteFunctionCallClient interface {
	Recv() (*ResponseReceive, error)
	grpc.ClientStream
}

type remoteCallServerStreamGrpcRemoteFunctionCallClient struct {
	grpc.ClientStream
}

func (x *remoteCallServerStreamGrpcRemoteFunctionCallClient) Recv() (*ResponseReceive, error) {
	m := new(ResponseReceive)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteCallServer is the server API for RemoteCall service.
// All implementations must embed UnimplementedRemoteCallServer
// for forward compatibility
type RemoteCallServer interface {
	// Grpc 单一模式一次请求返回一个对象
	GrpcRemoteFunctionCall(context.Context, *RequestSend) (*ResponseReceive, error)
	// Grpc 服务端流模式一次请求返回多个流对象
	ServerStreamGrpcRemoteFunctionCall(*RequestSend, RemoteCall_ServerStreamGrpcRemoteFunctionCallServer) error
	mustEmbedUnimplementedRemoteCallServer()
}

// UnimplementedRemoteCallServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteCallServer struct {
}

func (UnimplementedRemoteCallServer) GrpcRemoteFunctionCall(context.Context, *RequestSend) (*ResponseReceive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcRemoteFunctionCall not implemented")
}
func (UnimplementedRemoteCallServer) ServerStreamGrpcRemoteFunctionCall(*RequestSend, RemoteCall_ServerStreamGrpcRemoteFunctionCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamGrpcRemoteFunctionCall not implemented")
}
func (UnimplementedRemoteCallServer) mustEmbedUnimplementedRemoteCallServer() {}

// UnsafeRemoteCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteCallServer will
// result in compilation errors.
type UnsafeRemoteCallServer interface {
	mustEmbedUnimplementedRemoteCallServer()
}

func RegisterRemoteCallServer(s grpc.ServiceRegistrar, srv RemoteCallServer) {
	s.RegisterService(&RemoteCall_ServiceDesc, srv)
}

func _RemoteCall_GrpcRemoteFunctionCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCallServer).GrpcRemoteFunctionCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoservice.RemoteCall/GrpcRemoteFunctionCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCallServer).GrpcRemoteFunctionCall(ctx, req.(*RequestSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCall_ServerStreamGrpcRemoteFunctionCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestSend)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCallServer).ServerStreamGrpcRemoteFunctionCall(m, &remoteCallServerStreamGrpcRemoteFunctionCallServer{stream})
}

type RemoteCall_ServerStreamGrpcRemoteFunctionCallServer interface {
	Send(*ResponseReceive) error
	grpc.ServerStream
}

type remoteCallServerStreamGrpcRemoteFunctionCallServer struct {
	grpc.ServerStream
}

func (x *remoteCallServerStreamGrpcRemoteFunctionCallServer) Send(m *ResponseReceive) error {
	return x.ServerStream.SendMsg(m)
}

// RemoteCall_ServiceDesc is the grpc.ServiceDesc for RemoteCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoservice.RemoteCall",
	HandlerType: (*RemoteCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcRemoteFunctionCall",
			Handler:    _RemoteCall_GrpcRemoteFunctionCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamGrpcRemoteFunctionCall",
			Handler:       _RemoteCall_ServerStreamGrpcRemoteFunctionCall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zzgrpcservice.proto",
}
